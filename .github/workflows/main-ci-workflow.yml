# .github/workflows/main-ci-workflow.yml
name: Build and Publish

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Pour déclencher manuellement le workflow

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create databases
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE userdb;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE orderdb;"

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build and test with Maven
        run: mvn -B clean verify
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/orderdb
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres

      - name: Archive test results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/target/surefire-reports/
            **/target/failsafe-reports/
          retention-days: 5

  build-and-push-images:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        service: [user-service, order-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version from pom.xml
        id: get-version
        run: |
          VERSION=$(grep -m1 "<version>" pom.xml | sed 's/[^0-9\.]//g')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.get-version.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:buildcache,mode=max

  update-k8s-manifests:
    needs: build-and-push-images
    runs-on: self-hosted
    permissions:
      contents: write  # Important: donne les permissions d'écriture
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract version from pom.xml
        id: get-version
        shell: powershell
        run: |
          $versionLine = Select-String -Path pom.xml -Pattern "<version>(.*?)</version>" | Select-Object -First 1
          $version = $versionLine -replace ".*<version>(.*?)</version>.*", '$1'
          $version = $version -replace "[^0-9\.]", ""
          echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "Using version: $version"

      - name: Update Kubernetes manifests
        shell: powershell
        run: |
          # Mettre à jour les manifests avec la nouvelle version d'image
          (Get-Content k8s/user-service.yml) -replace "image: ${{ secrets.DOCKERHUB_USERNAME }}/user-service:.*", "image: ${{ secrets.DOCKERHUB_USERNAME }}/user-service:${{ steps.get-version.outputs.version }}" | Set-Content k8s/user-service.yml
          (Get-Content k8s/order-service.yml) -replace "image: ${{ secrets.DOCKERHUB_USERNAME }}/order-service:.*", "image: ${{ secrets.DOCKERHUB_USERNAME }}/order-service:${{ steps.get-version.outputs.version }}" | Set-Content k8s/order-service.yml

      - name: Commit and push updated manifests
        shell: powershell
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions Bot"
          git add k8s/*.yml
          git commit -m "ci: update k8s manifests with new image versions" || echo "No changes to commit"
          git push origin main --force