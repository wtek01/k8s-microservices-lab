# .github/workflows/kubernetes-deploy-workflow.yml
name: Deploy to Kubernetes

on:
  push:
    branches: [ main, master ]
    paths:
      - 'k8s/**'  # Se déclenche sur les modifications des fichiers dans le dossier k8s
  workflow_dispatch:  # Pour déclencher manuellement le workflow
  workflow_run:
    workflows: ["Build and Publish"]
    types:
      - completed
    branches: [main, master]

jobs:
  deploy:
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Verify kubectl configuration
        run: |
          kubectl version --client
          echo "Attempting to connect to cluster..."
          kubectl get nodes || echo "Failed to connect to cluster"

      - name: Apply Kubernetes manifests
        run: |
          echo "Applying Kubernetes configurations..."
          kubectl apply -f k8s/kafka-statefulset.yml
          kubectl apply -f k8s/postgres-deployment.yml
          kubectl apply -f k8s/user-service.yml
          kubectl apply -f k8s/order-service.yml
          # Ou utilisez kustomize
          # kubectl apply -k k8s/

      - name: Force redeploy services
        run: |
          echo "Forcing redeployment to ensure new images are used..."
          kubectl rollout restart deployment/user-service
          kubectl rollout restart deployment/order-service

      - name: Verify deployment
        run: |
          echo "Verifying deployments..."
          kubectl rollout status deployment/user-service
          kubectl rollout status deployment/order-service
          echo "All deployments successfully rolled out!"